{
	"info": {
		"_postman_id": "11ad4418-4631-42c1-a904-fb5d8056218f",
		"name": "NFL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28872126"
	},
	"item": [
		{
			"name": "Players by Team Basic",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Each object has expected properties\", function () {\r",
							"    pm.response.json().forEach(function (player) {\r",
							"        pm.expect(player).to.have.property(\"PlayerID\");\r",
							"        pm.expect(player).to.have.property(\"Team\");\r",
							"        pm.expect(player).to.have.property(\"FirstName\");\r",
							"        pm.expect(player).to.have.property(\"LastName\");\r",
							"        pm.expect(player).to.have.property(\"Position\");\r",
							"        pm.expect(player).to.have.property(\"Status\");\r",
							"        pm.expect(player).to.have.property(\"Height\");\r",
							"        pm.expect(player).to.have.property(\"Weight\");\r",
							"        pm.expect(player).to.have.property(\"BirthDate\");\r",
							"        pm.expect(player).to.have.property(\"College\");\r",
							"        pm.expect(player).to.have.property(\"Experience\");\r",
							"        pm.expect(player).to.have.property(\"FantasyPosition\");\r",
							"        pm.expect(player).to.have.property(\"Active\");\r",
							"        pm.expect(player).to.have.property(\"PositionCategory\");\r",
							"        pm.expect(player).to.have.property(\"Name\");\r",
							"        pm.expect(player).to.have.property(\"Age\");\r",
							"        pm.expect(player).to.have.property(\"ShortName\");\r",
							"        pm.expect(player).to.have.property(\"HeightFeet\");\r",
							"        pm.expect(player).to.have.property(\"HeightInches\");\r",
							"        pm.expect(player).to.have.property(\"TeamID\");\r",
							"        pm.expect(player).to.have.property(\"GlobalTeamID\");\r",
							"        pm.expect(player).to.have.property(\"UsaTodayPlayerID\");\r",
							"        pm.expect(player).to.have.property(\"UsaTodayHeadshotUrl\");\r",
							"        pm.expect(player).to.have.property(\"UsaTodayHeadshotNoBackgroundUrl\");\r",
							"        pm.expect(player).to.have.property(\"UsaTodayHeadshotUpdated\");\r",
							"        pm.expect(player).to.have.property(\"UsaTodayHeadshotNoBackgroundUpdated\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "9369cce3fb354466aa568710a2941c11",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.sportsdata.io/v3/nfl/scores/json/PlayersBasic/was",
					"protocol": "https",
					"host": [
						"api",
						"sportsdata",
						"io"
					],
					"path": [
						"v3",
						"nfl",
						"scores",
						"json",
						"PlayersBasic",
						"was"
					]
				}
			},
			"response": []
		},
		{
			"name": "Defense Projections By Season",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the user's input for the \"Season\" from the URL path\r",
							"const pathSegments = pm.request.url.path;\r",
							"const lastSegment = pathSegments[pathSegments.length - 1];\r",
							"const userSeason = lastSegment;\r",
							"\r",
							"// Parse the response JSON\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"// Check if the response is an array\r",
							"pm.test('Response is an array', () => {\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Check if each object in the array has the correct \"Season\" value\r",
							"pm.test('Each object in the array has the correct \"Season\" value', () => {\r",
							"    responseData.forEach((item) => {\r",
							"        pm.expect(item.Season).to.eql(parseInt(userSeason));\r",
							"    });\r",
							"});\r",
							"\r",
							"// Define an array of NFL team abbreviations\r",
							"const nflTeamAbbreviations = [\r",
							"    \"SF\", \"PHI\", \"DAL\", \"NYG\", \"WAS\", \"CHI\", \"GB\", \"MIN\", \"DET\", \"NO\",\r",
							"    \"ATL\", \"CAR\", \"TB\", \"LA\", \"SEA\", \"ARI\", \"KC\", \"DEN\", \"LV\", \"LAC\",\r",
							"    \"BAL\", \"PIT\", \"CLE\", \"CIN\", \"NE\", \"MIA\", \"BUF\", \"NYJ\", \"HOU\", \"IND\",\r",
							"    \"JAX\", \"TEN\", \"LAR\"\r",
							"];\r",
							"\r",
							"// Check if all NFL team abbreviations are present in the \"Team\" property\r",
							"pm.test('All \"Team\" values are valid NFL abbreviations', () => {\r",
							"    responseData.forEach(item => {\r",
							"        pm.expect(nflTeamAbbreviations).to.include(item.Team);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "9369cce3fb354466aa568710a2941c11",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.sportsdata.io/v3/nfl/projections/json/FantasyDefenseProjectionsBySeason/2023",
					"protocol": "https",
					"host": [
						"api",
						"sportsdata",
						"io"
					],
					"path": [
						"v3",
						"nfl",
						"projections",
						"json",
						"FantasyDefenseProjectionsBySeason",
						"2023"
					]
				}
			},
			"response": []
		},
		{
			"name": "Current Season",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "9369cce3fb354466aa568710a2941c11",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.sportsdata.io/v3/nfl/scores/json/CurrentSeason",
					"protocol": "https",
					"host": [
						"api",
						"sportsdata",
						"io"
					],
					"path": [
						"v3",
						"nfl",
						"scores",
						"json",
						"CurrentSeason"
					]
				}
			},
			"response": []
		},
		{
			"name": "Game Schedule",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const expectedProperties = [\r",
							"    \"GameID\", \"GlobalGameID\", \"ScoreID\", \"GameKey\", \"Season\", \"SeasonType\",\r",
							"    \"Status\", \"Canceled\", \"Date\", \"Day\", \"DateTime\", \"AwayTeam\", \"HomeTeam\",\r",
							"    \"GlobalAwayTeamID\", \"GlobalHomeTeamID\", \"AwayTeamID\", \"HomeTeamID\",\r",
							"    \"StadiumID\", \"Closed\", \"LastUpdated\", \"IsClosed\", \"Week\"\r",
							"];\r",
							"\r",
							"// Iterate through each object in the response array\r",
							"pm.test(\"Each object has expected properties\", function () {\r",
							"    pm.response.json().forEach(function (game) {\r",
							"        expectedProperties.forEach(function (property) {\r",
							"            pm.expect(game).to.have.property(property);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "9369cce3fb354466aa568710a2941c11",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.sportsdata.io/v3/nfl/scores/json/SchedulesBasic/2022",
					"protocol": "https",
					"host": [
						"api",
						"sportsdata",
						"io"
					],
					"path": [
						"v3",
						"nfl",
						"scores",
						"json",
						"SchedulesBasic",
						"2022"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scores by Season Basic",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const expectedProperties = [\r",
							"    \"GameKey\", \"SeasonType\", \"Season\", \"Week\", \"Date\", \"AwayTeam\", \"HomeTeam\",\r",
							"    \"AwayScore\", \"HomeScore\", \"Channel\", \"PointSpread\", \"OverUnder\", \"Quarter\",\r",
							"    \"TimeRemaining\", \"Possession\", \"Down\", \"Distance\", \"YardLine\", \"YardLineTerritory\",\r",
							"    \"RedZone\", \"AwayScoreQuarter1\", \"AwayScoreQuarter2\", \"AwayScoreQuarter3\", \"AwayScoreQuarter4\",\r",
							"    \"AwayScoreOvertime\", \"HomeScoreQuarter1\", \"HomeScoreQuarter2\", \"HomeScoreQuarter3\", \"HomeScoreQuarter4\",\r",
							"    \"HomeScoreOvertime\", \"HasStarted\", \"IsInProgress\", \"IsOver\", \"Has1stQuarterStarted\",\r",
							"    \"Has2ndQuarterStarted\", \"Has3rdQuarterStarted\", \"Has4thQuarterStarted\", \"IsOvertime\", \"DownAndDistance\",\r",
							"    \"QuarterDescription\", \"StadiumID\", \"LastUpdated\", \"GeoLat\", \"GeoLong\", \"ForecastTempLow\",\r",
							"    \"ForecastTempHigh\", \"ForecastDescription\", \"ForecastWindChill\", \"ForecastWindSpeed\",\r",
							"    \"AwayTeamMoneyLine\", \"HomeTeamMoneyLine\", \"Canceled\", \"Closed\", \"LastPlay\", \"Day\",\r",
							"    \"DateTime\", \"AwayTeamID\", \"HomeTeamID\", \"GlobalGameID\", \"GlobalAwayTeamID\", \"GlobalHomeTeamID\",\r",
							"    \"PointSpreadAwayTeamMoneyLine\", \"PointSpreadHomeTeamMoneyLine\", \"ScoreID\", \"Status\", \"GameEndDateTime\",\r",
							"    \"HomeRotationNumber\", \"AwayRotationNumber\", \"NeutralVenue\", \"RefereeID\", \"OverPayout\", \"UnderPayout\",\r",
							"    \"HomeTimeouts\", \"AwayTimeouts\", \"DateTimeUTC\", \"Attendance\", \"IsClosed\", \"StadiumDetails\"\r",
							"];\r",
							"\r",
							"// Iterate through each object in the response array\r",
							"pm.test(\"Each object has expected properties\", function () {\r",
							"    pm.response.json().forEach(function (game) {\r",
							"        expectedProperties.forEach(function (property) {\r",
							"            pm.expect(game).to.have.property(property);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "9369cce3fb354466aa568710a2941c11",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.sportsdata.io/v3/nfl/scores/json/Scores/2023",
					"protocol": "https",
					"host": [
						"api",
						"sportsdata",
						"io"
					],
					"path": [
						"v3",
						"nfl",
						"scores",
						"json",
						"Scores",
						"2023"
					]
				}
			},
			"response": []
		},
		{
			"name": "Standings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const expectedProperties = [\r",
							"    \"SeasonType\", \"Season\", \"Conference\", \"Division\", \"Team\", \"Name\", \"Wins\",\r",
							"    \"Losses\", \"Ties\", \"Percentage\", \"PointsFor\", \"PointsAgainst\", \"NetPoints\",\r",
							"    \"Touchdowns\", \"DivisionWins\", \"DivisionLosses\", \"ConferenceWins\", \"ConferenceLosses\",\r",
							"    \"TeamID\", \"DivisionTies\", \"ConferenceTies\", \"GlobalTeamID\", \"DivisionRank\", \"ConferenceRank\"\r",
							"];\r",
							"\r",
							"// Iterate through each object in the response array\r",
							"pm.test(\"Each object has expected properties\", function () {\r",
							"    pm.response.json().forEach(function (team) {\r",
							"        expectedProperties.forEach(function (property) {\r",
							"            pm.expect(team).to.have.property(property);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "9369cce3fb354466aa568710a2941c11",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.sportsdata.io/v3/nfl/scores/json/Standings/2023",
					"protocol": "https",
					"host": [
						"api",
						"sportsdata",
						"io"
					],
					"path": [
						"v3",
						"nfl",
						"scores",
						"json",
						"Standings",
						"2023"
					]
				}
			},
			"response": []
		},
		{
			"name": "Upcoming Timeframe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const expectedProperties = [\r",
							"    \"SeasonType\",\r",
							"    \"Season\",\r",
							"    \"Week\",\r",
							"    \"Name\",\r",
							"    \"ShortName\",\r",
							"    \"StartDate\",\r",
							"    \"EndDate\",\r",
							"    \"FirstGameStart\",\r",
							"    \"FirstGameEnd\",\r",
							"    \"LastGameEnd\",\r",
							"    \"HasGames\",\r",
							"    \"HasStarted\",\r",
							"    \"HasEnded\",\r",
							"    \"HasFirstGameStarted\",\r",
							"    \"HasFirstGameEnded\",\r",
							"    \"HasLastGameEnded\",\r",
							"    \"ApiSeason\",\r",
							"    \"ApiWeek\"\r",
							"];\r",
							"\r",
							"// Access the first object in the response array\r",
							"const responseObject = pm.response.json()[0];\r",
							"\r",
							"// Iterate through the properties and check if they exist in the response\r",
							"pm.test(\"Check if expected properties exist\", function () {\r",
							"    expectedProperties.forEach(function (property) {\r",
							"        pm.expect(responseObject).to.have.property(property);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "9369cce3fb354466aa568710a2941c11",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.sportsdata.io/v3/nfl/scores/json/Timeframes/upcoming",
					"protocol": "https",
					"host": [
						"api",
						"sportsdata",
						"io"
					],
					"path": [
						"v3",
						"nfl",
						"scores",
						"json",
						"Timeframes",
						"upcoming"
					]
				}
			},
			"response": []
		},
		{
			"name": "Current Timeframe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const expectedProperties = [\r",
							"    \"SeasonType\",\r",
							"    \"Season\",\r",
							"    \"Week\",\r",
							"    \"Name\",\r",
							"    \"ShortName\",\r",
							"    \"StartDate\",\r",
							"    \"EndDate\",\r",
							"    \"FirstGameStart\",\r",
							"    \"FirstGameEnd\",\r",
							"    \"LastGameEnd\",\r",
							"    \"HasGames\",\r",
							"    \"HasStarted\",\r",
							"    \"HasEnded\",\r",
							"    \"HasFirstGameStarted\",\r",
							"    \"HasFirstGameEnded\",\r",
							"    \"HasLastGameEnded\",\r",
							"    \"ApiSeason\",\r",
							"    \"ApiWeek\"\r",
							"];\r",
							"\r",
							"// Access the first object in the response array\r",
							"const responseObject = pm.response.json()[0];\r",
							"\r",
							"// Iterate through the properties and check if they exist in the response\r",
							"pm.test(\"Check if expected properties exist\", function () {\r",
							"    expectedProperties.forEach(function (property) {\r",
							"        pm.expect(responseObject).to.have.property(property);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "9369cce3fb354466aa568710a2941c11",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.sportsdata.io/v3/nfl/scores/json/Timeframes/current",
					"protocol": "https",
					"host": [
						"api",
						"sportsdata",
						"io"
					],
					"path": [
						"v3",
						"nfl",
						"scores",
						"json",
						"Timeframes",
						"current"
					]
				}
			},
			"response": []
		},
		{
			"name": "Scores by Season",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const expectedProperties = [\r",
							"    \"GameKey\",\r",
							"    \"SeasonType\",\r",
							"    \"Season\",\r",
							"    \"Week\",\r",
							"    \"Date\",\r",
							"    \"AwayTeam\",\r",
							"    \"HomeTeam\",\r",
							"    \"Channel\",\r",
							"    \"PointSpread\",\r",
							"    \"OverUnder\",\r",
							"    \"StadiumID\",\r",
							"    \"Canceled\",\r",
							"    \"GeoLat\",\r",
							"    \"GeoLong\",\r",
							"    \"ForecastTempLow\",\r",
							"    \"ForecastTempHigh\",\r",
							"    \"ForecastDescription\",\r",
							"    \"ForecastWindChill\",\r",
							"    \"ForecastWindSpeed\",\r",
							"    \"AwayTeamMoneyLine\",\r",
							"    \"HomeTeamMoneyLine\",\r",
							"    \"Day\",\r",
							"    \"DateTime\",\r",
							"    \"GlobalGameID\",\r",
							"    \"GlobalAwayTeamID\",\r",
							"    \"GlobalHomeTeamID\",\r",
							"    \"ScoreID\",\r",
							"    \"Status\",\r",
							"    \"IsClosed\",\r",
							"    \"StadiumDetails\"\r",
							"];\r",
							"\r",
							"// Iterate through each object in the response array\r",
							"pm.test(\"Each object has expected properties\", function () {\r",
							"    pm.response.json().forEach(function (game) {\r",
							"        expectedProperties.forEach(function (property) {\r",
							"            pm.expect(game).to.have.property(property);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "9369cce3fb354466aa568710a2941c11",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.sportsdata.io/v3/nfl/scores/json/Schedules/2023",
					"protocol": "https",
					"host": [
						"api",
						"sportsdata",
						"io"
					],
					"path": [
						"v3",
						"nfl",
						"scores",
						"json",
						"Schedules",
						"2023"
					]
				}
			},
			"response": []
		},
		{
			"name": "Teams Basic",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const expectedProperties = [\r",
							"    \"Key\",\r",
							"    \"TeamID\",\r",
							"    \"PlayerID\",\r",
							"    \"City\",\r",
							"    \"Name\",\r",
							"    \"Conference\",\r",
							"    \"Division\",\r",
							"    \"FullName\",\r",
							"    \"StadiumID\",\r",
							"    \"ByeWeek\",\r",
							"    \"GlobalTeamID\",\r",
							"    \"HeadCoach\",\r",
							"    \"PrimaryColor\",\r",
							"    \"SecondaryColor\",\r",
							"    \"TertiaryColor\",\r",
							"    \"QuaternaryColor\",\r",
							"    \"WikipediaLogoURL\",\r",
							"    \"WikipediaWordMarkURL\",\r",
							"    \"OffensiveCoordinator\",\r",
							"    \"DefensiveCoordinator\",\r",
							"    \"SpecialTeamsCoach\",\r",
							"    \"OffensiveScheme\",\r",
							"    \"DefensiveScheme\"\r",
							"];\r",
							"\r",
							"// Iterate through each object in the response array\r",
							"pm.test(\"Each object has expected properties\", function () {\r",
							"    pm.response.json().forEach(function (team) {\r",
							"        expectedProperties.forEach(function (property) {\r",
							"            pm.expect(team).to.have.property(property);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "9369cce3fb354466aa568710a2941c11",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.sportsdata.io/v3/nfl/scores/json/TeamsBasic",
					"protocol": "https",
					"host": [
						"api",
						"sportsdata",
						"io"
					],
					"path": [
						"v3",
						"nfl",
						"scores",
						"json",
						"TeamsBasic"
					]
				}
			},
			"response": []
		},
		{
			"name": "Players by Team",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const expectedProperties = [\r",
							"    \"PlayerID\",\r",
							"    \"Team\",\r",
							"    \"Number\",\r",
							"    \"FirstName\",\r",
							"    \"LastName\",\r",
							"    \"Position\",\r",
							"    \"Status\",\r",
							"    \"Height\",\r",
							"    \"Weight\",\r",
							"    \"BirthDate\",\r",
							"    \"College\",\r",
							"    \"Experience\",\r",
							"    \"FantasyPosition\",\r",
							"    \"Active\",\r",
							"    \"PositionCategory\",\r",
							"    \"Name\",\r",
							"    \"Age\",\r",
							"    \"ExperienceString\",\r",
							"    \"BirthDateString\",\r",
							"    \"PhotoUrl\",\r",
							"    \"ByeWeek\",\r",
							"    \"UpcomingGameOpponent\",\r",
							"    \"UpcomingGameWeek\",\r",
							"    \"ShortName\",\r",
							"    \"AverageDraftPosition\",\r",
							"    \"DepthPositionCategory\",\r",
							"    \"DepthPosition\",\r",
							"    \"DepthOrder\",\r",
							"    \"DepthDisplayOrder\",\r",
							"    \"CurrentTeam\",\r",
							"    \"CollegeDraftTeam\",\r",
							"    \"CollegeDraftYear\",\r",
							"    \"CollegeDraftRound\",\r",
							"    \"CollegeDraftPick\",\r",
							"    \"IsUndraftedFreeAgent\",\r",
							"    \"HeightFeet\",\r",
							"    \"HeightInches\",\r",
							"    \"UpcomingOpponentRank\",\r",
							"    \"UpcomingOpponentPositionRank\",\r",
							"    \"CurrentStatus\",\r",
							"    \"UpcomingSalary\",\r",
							"    \"FantasyAlarmPlayerID\",\r",
							"    \"SportRadarPlayerID\",\r",
							"    \"RotoworldPlayerID\",\r",
							"    \"RotoWirePlayerID\",\r",
							"    \"StatsPlayerID\",\r",
							"    \"SportsDirectPlayerID\",\r",
							"    \"XmlTeamPlayerID\",\r",
							"    \"FanDuelPlayerID\",\r",
							"    \"DraftKingsPlayerID\",\r",
							"    \"YahooPlayerID\",\r",
							"    \"InjuryStatus\",\r",
							"    \"InjuryBodyPart\",\r",
							"    \"InjuryStartDate\",\r",
							"    \"InjuryNotes\",\r",
							"    \"FanDuelName\",\r",
							"    \"DraftKingsName\",\r",
							"    \"YahooName\",\r",
							"    \"FantasyPositionDepthOrder\",\r",
							"    \"InjuryPractice\",\r",
							"    \"InjuryPracticeDescription\",\r",
							"    \"DeclaredInactive\",\r",
							"    \"UpcomingFanDuelSalary\",\r",
							"    \"UpcomingDraftKingsSalary\",\r",
							"    \"UpcomingYahooSalary\",\r",
							"    \"TeamID\",\r",
							"    \"GlobalTeamID\",\r",
							"    \"FantasyDraftPlayerID\",\r",
							"    \"FantasyDraftName\",\r",
							"    \"UsaTodayPlayerID\",\r",
							"    \"UsaTodayHeadshotUrl\",\r",
							"    \"UsaTodayHeadshotNoBackgroundUrl\",\r",
							"    \"UsaTodayHeadshotUpdated\",\r",
							"    \"UsaTodayHeadshotNoBackgroundUpdated\",\r",
							"    \"PlayerSeason\",\r",
							"    \"LatestNews\"\r",
							"];\r",
							"\r",
							"// Iterate through each object in the response array\r",
							"pm.test(\"Each object has expected properties\", function () {\r",
							"    pm.response.json().forEach(function (player) {\r",
							"        expectedProperties.forEach(function (property) {\r",
							"            pm.expect(player).to.have.property(property);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "9369cce3fb354466aa568710a2941c11",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.sportsdata.io/v3/nfl/scores/json/Players/was",
					"protocol": "https",
					"host": [
						"api",
						"sportsdata",
						"io"
					],
					"path": [
						"v3",
						"nfl",
						"scores",
						"json",
						"Players",
						"was"
					]
				}
			},
			"response": []
		},
		{
			"name": "Player details by Player",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const expectedProperties = [\r",
							"    \"PlayerID\",\r",
							"    \"Team\",\r",
							"    \"Number\",\r",
							"    \"FirstName\",\r",
							"    \"LastName\",\r",
							"    \"Position\",\r",
							"    \"Status\",\r",
							"    \"Height\",\r",
							"    \"Weight\",\r",
							"    \"BirthDate\",\r",
							"    \"College\",\r",
							"    \"Experience\",\r",
							"    \"FantasyPosition\",\r",
							"    \"Active\",\r",
							"    \"PositionCategory\",\r",
							"    \"Name\",\r",
							"    \"Age\",\r",
							"    \"ExperienceString\",\r",
							"    \"BirthDateString\",\r",
							"    \"PhotoUrl\",\r",
							"    \"ByeWeek\",\r",
							"    \"UpcomingGameOpponent\",\r",
							"    \"UpcomingGameWeek\",\r",
							"    \"ShortName\",\r",
							"    \"AverageDraftPosition\",\r",
							"    \"DepthPositionCategory\",\r",
							"    \"DepthPosition\",\r",
							"    \"DepthOrder\",\r",
							"    \"DepthDisplayOrder\",\r",
							"    \"CurrentTeam\",\r",
							"    \"CollegeDraftTeam\",\r",
							"    \"CollegeDraftYear\",\r",
							"    \"CollegeDraftRound\",\r",
							"    \"CollegeDraftPick\",\r",
							"    \"IsUndraftedFreeAgent\",\r",
							"    \"HeightFeet\",\r",
							"    \"HeightInches\",\r",
							"    \"UpcomingOpponentRank\",\r",
							"    \"UpcomingOpponentPositionRank\",\r",
							"    \"CurrentStatus\",\r",
							"    \"UpcomingSalary\",\r",
							"    \"FantasyAlarmPlayerID\",\r",
							"    \"SportRadarPlayerID\",\r",
							"    \"RotoworldPlayerID\",\r",
							"    \"RotoWirePlayerID\",\r",
							"    \"StatsPlayerID\",\r",
							"    \"SportsDirectPlayerID\",\r",
							"    \"XmlTeamPlayerID\",\r",
							"    \"FanDuelPlayerID\",\r",
							"    \"DraftKingsPlayerID\",\r",
							"    \"YahooPlayerID\",\r",
							"    \"InjuryStatus\",\r",
							"    \"InjuryBodyPart\",\r",
							"    \"InjuryStartDate\",\r",
							"    \"InjuryNotes\",\r",
							"    \"FanDuelName\",\r",
							"    \"DraftKingsName\",\r",
							"    \"YahooName\",\r",
							"    \"FantasyPositionDepthOrder\",\r",
							"    \"InjuryPractice\",\r",
							"    \"InjuryPracticeDescription\",\r",
							"    \"DeclaredInactive\",\r",
							"    \"UpcomingFanDuelSalary\",\r",
							"    \"UpcomingDraftKingsSalary\",\r",
							"    \"UpcomingYahooSalary\",\r",
							"    \"TeamID\",\r",
							"    \"GlobalTeamID\",\r",
							"    \"FantasyDraftPlayerID\",\r",
							"    \"FantasyDraftName\",\r",
							"    \"UsaTodayPlayerID\",\r",
							"    \"UsaTodayHeadshotUrl\",\r",
							"    \"UsaTodayHeadshotNoBackgroundUrl\",\r",
							"    \"UsaTodayHeadshotUpdated\",\r",
							"    \"UsaTodayHeadshotNoBackgroundUpdated\",\r",
							"    \"PlayerSeason\",\r",
							"    \"LatestNews\"\r",
							"];\r",
							"\r",
							"// Check if the expected properties exist in the player data\r",
							"pm.test(\"Player has expected properties\", function () {\r",
							"    expectedProperties.forEach(function (property) {\r",
							"        pm.expect(pm.response.json()).to.have.property(property);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "9369cce3fb354466aa568710a2941c11",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.sportsdata.io/v3/nfl/scores/json/Player/732",
					"protocol": "https",
					"host": [
						"api",
						"sportsdata",
						"io"
					],
					"path": [
						"v3",
						"nfl",
						"scores",
						"json",
						"Player",
						"732"
					]
				}
			},
			"response": []
		},
		{
			"name": "Box Score V3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJson = pm.response.json();\r",
							"\r",
							"// Check if \"Score\" exists and is not an array\r",
							"pm.test('Check \"Score\" property', function () {\r",
							"    pm.expect(responseJson).to.have.property('Score').and.not.an('array');\r",
							"});\r",
							"\r",
							"// Check if \"Quarters\" exists and is an array\r",
							"pm.test('Check \"Quarters\" property', function () {\r",
							"    pm.expect(responseJson).to.have.property('Quarters').and.be.an('array');\r",
							"});\r",
							"\r",
							"// Check if \"TeamGames\" exists and is an array\r",
							"pm.test('Check \"TeamGames\" property', function () {\r",
							"    pm.expect(responseJson).to.have.property('TeamGames').and.be.an('array');\r",
							"});\r",
							"\r",
							"// Check if \"PlayerGames\" exists and is an array\r",
							"pm.test('Check \"PlayerGames\" property', function () {\r",
							"    pm.expect(responseJson).to.have.property('PlayerGames').and.be.an('array');\r",
							"});\r",
							"\r",
							"// Check if \"FantasyDefenseGames\" exists and is an array\r",
							"pm.test('Check \"FantasyDefenseGames\" property', function () {\r",
							"    pm.expect(responseJson).to.have.property('FantasyDefenseGames').and.be.an('array');\r",
							"});\r",
							"\r",
							"// Check if \"ScoringPlays\" exists and is an array\r",
							"pm.test('Check \"ScoringPlays\" property', function () {\r",
							"    pm.expect(responseJson).to.have.property('ScoringPlays').and.be.an('array');\r",
							"});\r",
							"\r",
							"// Check if \"ScoringDetails\" exists and is an array\r",
							"pm.test('Check \"ScoringDetails\" property', function () {\r",
							"    pm.expect(responseJson).to.have.property('ScoringDetails').and.be.an('array');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Ocp-Apim-Subscription-Key",
						"value": "9369cce3fb354466aa568710a2941c11",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.sportsdata.io/v3/nfl/stats/json/BoxScoreV3/2023/4/was",
					"protocol": "https",
					"host": [
						"api",
						"sportsdata",
						"io"
					],
					"path": [
						"v3",
						"nfl",
						"stats",
						"json",
						"BoxScoreV3",
						"2023",
						"4",
						"was"
					]
				}
			},
			"response": []
		}
	]
}